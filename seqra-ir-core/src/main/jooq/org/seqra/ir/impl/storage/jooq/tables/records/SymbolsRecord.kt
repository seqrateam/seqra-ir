
/*
 * This file is generated by jOOQ.
 */
package org.seqra.ir.impl.storage.jooq.tables.records


import org.seqra.ir.impl.storage.jooq.tables.Symbols
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SymbolsRecord() : UpdatableRecordImpl<SymbolsRecord>(Symbols.SYMBOLS), Record2<Long?, String?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var name: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, String?> = super.fieldsRow() as Row2<Long?, String?>
    override fun valuesRow(): Row2<Long?, String?> = super.valuesRow() as Row2<Long?, String?>
    override fun field1(): Field<Long?> = Symbols.SYMBOLS.ID
    override fun field2(): Field<String?> = Symbols.SYMBOLS.NAME
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun value1(): Long? = id
    override fun value2(): String? = name

    override fun value1(value: Long?): SymbolsRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): SymbolsRecord {
        this.name = value
        return this
    }

    override fun values(value1: Long?, value2: String?): SymbolsRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised SymbolsRecord
     */
    constructor(id: Long? = null, name: String? = null): this() {
        this.id = id
        this.name = name
    }
}
