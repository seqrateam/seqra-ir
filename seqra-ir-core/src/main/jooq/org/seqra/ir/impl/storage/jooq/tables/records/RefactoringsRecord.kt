
/*
 * This file is generated by jOOQ.
 */
package org.seqra.ir.impl.storage.jooq.tables.records


import org.seqra.ir.impl.storage.jooq.tables.Refactorings
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Row1
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RefactoringsRecord() : TableRecordImpl<RefactoringsRecord>(Refactorings.REFACTORINGS), Record1<String?> {

    var name: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row1<String?> = super.fieldsRow() as Row1<String?>
    override fun valuesRow(): Row1<String?> = super.valuesRow() as Row1<String?>
    override fun field1(): Field<String?> = Refactorings.REFACTORINGS.NAME
    override fun component1(): String? = name
    override fun value1(): String? = name

    override fun value1(value: String?): RefactoringsRecord {
        this.name = value
        return this
    }

    override fun values(value1: String?): RefactoringsRecord {
        this.value1(value1)
        return this
    }

    /**
     * Create a detached, initialised RefactoringsRecord
     */
    constructor(name: String? = null): this() {
        this.name = name
    }
}
