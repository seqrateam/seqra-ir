
/*
 * This file is generated by jOOQ.
 */
package org.seqra.ir.impl.storage.jooq.tables


import org.seqra.ir.impl.storage.jooq.DefaultSchema
import org.seqra.ir.impl.storage.jooq.tables.records.ApplicationmetadataRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Applicationmetadata(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ApplicationmetadataRecord>?,
    aliased: Table<ApplicationmetadataRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ApplicationmetadataRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>ApplicationMetadata</code>
         */
        val APPLICATIONMETADATA = Applicationmetadata()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ApplicationmetadataRecord> = ApplicationmetadataRecord::class.java

    /**
     * The column <code>ApplicationMetadata.version</code>.
     */
    val VERSION: TableField<ApplicationmetadataRecord, String?> = createField(DSL.name("version"), SQLDataType.VARCHAR(1024).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ApplicationmetadataRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ApplicationmetadataRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>ApplicationMetadata</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>ApplicationMetadata</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>ApplicationMetadata</code> table reference
     */
    constructor(): this(DSL.name("ApplicationMetadata"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ApplicationmetadataRecord>): this(Internal.createPathAlias(child, key), child, key, APPLICATIONMETADATA, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): Applicationmetadata = Applicationmetadata(DSL.name(alias), this)
    override fun `as`(alias: Name): Applicationmetadata = Applicationmetadata(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Applicationmetadata = Applicationmetadata(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Applicationmetadata = Applicationmetadata(name, null)

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row1<String?> = super.fieldsRow() as Row1<String?>
}
